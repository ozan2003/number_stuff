#![allow(unused_imports)]
use bit_vec::BitVec;
use rug::rand::RandState;
use rug::{Complete, Integer};

/// Determine the number of iterations `k` based on the magnitude of `num`.
fn determine_k(num: &Integer) -> u32
{
    if *num < Integer::i_pow_u(10, 3).complete()
    {
        5
    }
    else if *num < Integer::i_pow_u(10, 6).complete()
    {
        10
    }
    else if *num < Integer::i_pow_u(10, 9).complete()
    {
        20
    }
    else
    {
        50
    }
}

/// Check if a number is prime using the Miller-Rabin primality test.
/// Iteration number is determined heuristically based on the magnitude of
/// `num`.
#[allow(clippy::many_single_char_names)]
#[must_use]
pub fn is_prime(num: &Integer) -> bool
{
    /*
     * Fermat's Little Theorem:
     *  Let `p` a prime number and `a` is any integer that's not divisible by
     * `p`,  then:
     *
     *  a^(p-1) === 1 (mod p)
     *
     *
     * To test a number `n` for primality, we can pick a random number `a`
     * (called "witness") and check if the following holds:
     *
     * a^(n-1) === 1 (mod n)
     *
     * If the above doesn't hold, then `n` is composite since Fermat's Little
     * Theorem tells us this equation must hold for prime numbers.
     *
     * But, some composite numbers also satisfy the above equation. These are
     * called "Carmichael numbers" e.g 561.
     *
     * This is where the Miller-Rabin primality test comes in. Instead of
     * just checking if a^(n-1) === 1 (mod n), it delves deeper.
     *
     * When n is prime and n-1 = 2^s * d (d is odd), we can write:
     *
     * a^(n-1) = a^(2^s * d) = (a^d)^(2^s)
     *
     * If n is prime, this sequence:
     *
     * a^d, a^(2d), a^(4d), a^(8d), ... a^(2^s * d)
     *
     * must either:
     * - Start with 1
     * - Start with something else but contain -1 (or n-1) somewhere.
     *
     * If n is composite, at least 75% of bases a will reveal n is composite.
     * Thus, after k iterations, the probability of `n` being prime is 1/4^k.
     */
    if *num < 2
    {
        return false;
    }
    else if *num == 2 || *num == 3
    {
        return true;
    }

    if num.is_even()
    {
        return false;
    }

    // Determine k based on magnitude of n.
    let k = self::determine_k(num);

    // Step 1: Decompose n-1 into d * 2^s.
    let (s, d) = {
        let mut s: i32 = 0;
        let mut d: Integer = (num - Integer::ONE).complete();

        while d.is_even()
        {
            d >>= 1;
            s += 1;
        }
        (s, d)
    };

    // Step 2: Search for a witness.
    let mut rng = RandState::new();
    // Step 3: Repeat k times.
    for _ in 0..k
    {
        // Randomly chosen base a, 2 <= a <= n-2 -> 0 <= a - 2 <= n-4
        let a: Integer = (num - Integer::from(4)).random_below(&mut rng) + 2;

        // Compute x = a^d % n.
        let mut x = a
            .pow_mod_ref(&d, num)
            .expect("Couldn't complete pow_mod operation.")
            .complete();

        if x == *Integer::ONE || x == (num - Integer::ONE).complete()
        {
            // `num` passes the test for this `a`.
            continue;
        }

        // Otherwise, square `x` repeatedly up to `s-1` times.
        for _ in 0..s - 1
        {
            x.pow_mod_mut(&Integer::from(2), num)
                .unwrap();

            // Check is x === -1 (mod n).
            // x == num - 1 is equivalent to x == -1 (mod n).
            if x == (num - Integer::ONE).complete()
            {
                // If found, `num` passes the test for this `a`.
                break;
            }
        }

        // If never found, `num` is composite.
        if x != (num - Integer::ONE).complete()
        {
            return false;
        }
    }

    true
}

#[cfg(test)]
mod tests
{
    use super::*;

    #[test]
    fn test_determine_k()
    {
        assert_eq!(determine_k(&Integer::parse("100").unwrap().complete()), 5); // < 10^3
        assert_eq!(determine_k(&Integer::parse("999").unwrap().complete()), 5);
        assert_eq!(determine_k(&Integer::parse("1000").unwrap().complete()), 10); // < 10^6
        assert_eq!(
            determine_k(&Integer::parse("999999").unwrap().complete()),
            10
        );
        assert_eq!(
            determine_k(&Integer::parse("1000000").unwrap().complete()),
            20
        ); // < 10^9
        assert_eq!(
            determine_k(
                &Integer::parse("999999999")
                    .unwrap()
                    .complete()
            ),
            20
        );
        assert_eq!(
            determine_k(
                &Integer::parse("1000000000")
                    .unwrap()
                    .complete()
            ),
            50
        ); // >= 10^9
        assert_eq!(
            determine_k(
                &Integer::parse("999999999999")
                    .unwrap()
                    .complete()
            ),
            50
        );
        assert_eq!(
            determine_k(
                &Integer::parse("1000000000000")
                    .unwrap()
                    .complete()
            ),
            50
        );
    }

    #[test]
    fn test_is_prime()
    {
        // 0-100
        let primes = [
            2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,
            89, 97,
        ];

        assert!(
            primes
                .into_iter()
                .map(Integer::from)
                .all(|x| is_prime(&x))
        );

        // 1000-4500
        let primes = [
            1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091,
            1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193,
            1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291,
            1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423,
            1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493,
            1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601,
            1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699,
            1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811,
            1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931,
            1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029,
            2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137,
            2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267,
            2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357,
            2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459,
            2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593,
            2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693,
            2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791,
            2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903,
            2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023,
            3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167,
            3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271,
            3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373,
            3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511,
            3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607,
            3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709,
            3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833,
            3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931,
            3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057,
            4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177,
            4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283,
            4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423,
            4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493,
        ];

        assert!(
            primes
                .into_iter()
                .map(Integer::from)
                .all(|x| is_prime(&x))
        );

        // 2^54 - 2^54 + 1000
        let primes: [u64; 269] = [
            18014398509482143,
            18014398509482147,
            18014398509482171,
            18014398509482329,
            18014398509482357,
            18014398509482387,
            18014398509482399,
            18014398509482461,
            18014398509482471,
            18014398509482483,
            18014398509482537,
            18014398509482579,
            18014398509482603,
            18014398509482677,
            18014398509482693,
            18014398509482723,
            18014398509482839,
            18014398509482863,
            18014398509482917,
            18014398509482941,
            18014398509482951,
            18014398509482989,
            18014398509483031,
            18014398509483049,
            18014398509483067,
            18014398509483119,
            18014398509483179,
            18014398509483241,
            18014398509483247,
            18014398509483367,
            18014398509483403,
            18014398509483437,
            18014398509483449,
            18014398509483461,
            18014398509483463,
            18014398509483473,
            18014398509483547,
            18014398509483601,
            18014398509483683,
            18014398509483721,
            18014398509483781,
            18014398509483787,
            18014398509483799,
            18014398509483823,
            18014398509483829,
            18014398509483863,
            18014398509483889,
            18014398509483949,
            18014398509484007,
            18014398509484063,
            18014398509484103,
            18014398509484127,
            18014398509484129,
            18014398509484217,
            18014398509484243,
            18014398509484271,
            18014398509484327,
            18014398509484357,
            18014398509484411,
            18014398509484477,
            18014398509484693,
            18014398509484697,
            18014398509484703,
            18014398509484739,
            18014398509484859,
            18014398509484921,
            18014398509484931,
            18014398509484957,
            18014398509484969,
            18014398509484987,
            18014398509485071,
            18014398509485149,
            18014398509485197,
            18014398509485219,
            18014398509485227,
            18014398509485249,
            18014398509485267,
            18014398509485351,
            18014398509485407,
            18014398509485419,
            18014398509485437,
            18014398509485447,
            18014398509485449,
            18014398509485467,
            18014398509485513,
            18014398509485561,
            18014398509485569,
            18014398509485647,
            18014398509485659,
            18014398509485681,
            18014398509485687,
            18014398509485689,
            18014398509485699,
            18014398509485701,
            18014398509485713,
            18014398509485717,
            18014398509485789,
            18014398509485797,
            18014398509485801,
            18014398509485803,
            18014398509485879,
            18014398509485887,
            18014398509485899,
            18014398509485957,
            18014398509485971,
            18014398509486047,
            18014398509486053,
            18014398509486191,
            18014398509486229,
            18014398509486233,
            18014398509486251,
            18014398509486349,
            18014398509486371,
            18014398509486403,
            18014398509486443,
            18014398509486461,
            18014398509486481,
            18014398509486497,
            18014398509486557,
            18014398509486559,
            18014398509486571,
            18014398509486637,
            18014398509486671,
            18014398509486683,
            18014398509486707,
            18014398509486713,
            18014398509486727,
            18014398509486761,
            18014398509486763,
            18014398509486767,
            18014398509486839,
            18014398509486853,
            18014398509486931,
            18014398509486971,
            18014398509486997,
            18014398509487027,
            18014398509487087,
            18014398509487141,
            18014398509487223,
            18014398509487273,
            18014398509487277,
            18014398509487291,
            18014398509487297,
            18014398509487319,
            18014398509487339,
            18014398509487399,
            18014398509487409,
            18014398509487459,
            18014398509487481,
            18014398509487537,
            18014398509487553,
            18014398509487669,
            18014398509487927,
            18014398509488039,
            18014398509488071,
            18014398509488077,
            18014398509488111,
            18014398509488149,
            18014398509488153,
            18014398509488233,
            18014398509488281,
            18014398509488327,
            18014398509488333,
            18014398509488341,
            18014398509488351,
            18014398509488369,
            18014398509488387,
            18014398509488467,
            18014398509488471,
            18014398509488483,
            18014398509488561,
            18014398509488597,
            18014398509488609,
            18014398509488677,
            18014398509488701,
            18014398509488761,
            18014398509488779,
            18014398509488783,
            18014398509488789,
            18014398509488809,
            18014398509488813,
            18014398509488827,
            18014398509488833,
            18014398509488891,
            18014398509488947,
            18014398509488977,
            18014398509488993,
            18014398509489017,
            18014398509489037,
            18014398509489047,
            18014398509489073,
            18014398509489101,
            18014398509489119,
            18014398509489149,
            18014398509489157,
            18014398509489167,
            18014398509489199,
            18014398509489329,
            18014398509489353,
            18014398509489367,
            18014398509489407,
            18014398509489409,
            18014398509489419,
            18014398509489449,
            18014398509489467,
            18014398509489619,
            18014398509489653,
            18014398509489691,
            18014398509489709,
            18014398509489727,
            18014398509489731,
            18014398509489787,
            18014398509489817,
            18014398509489869,
            18014398509489911,
            18014398509489923,
            18014398509490003,
            18014398509490007,
            18014398509490081,
            18014398509490129,
            18014398509490139,
            18014398509490151,
            18014398509490219,
            18014398509490237,
            18014398509490333,
            18014398509490363,
            18014398509490391,
            18014398509490393,
            18014398509490441,
            18014398509490463,
            18014398509490469,
            18014398509490489,
            18014398509490577,
            18014398509490583,
            18014398509490613,
            18014398509490639,
            18014398509490667,
            18014398509490699,
            18014398509490729,
            18014398509490759,
            18014398509490783,
            18014398509490843,
            18014398509490853,
            18014398509490891,
            18014398509490921,
            18014398509490949,
            18014398509490967,
            18014398509490997,
            18014398509491029,
            18014398509491063,
            18014398509491077,
            18014398509491123,
            18014398509491129,
            18014398509491203,
            18014398509491221,
            18014398509491281,
            18014398509491291,
            18014398509491303,
            18014398509491399,
            18014398509491441,
            18014398509491453,
            18014398509491533,
            18014398509491539,
            18014398509491569,
            18014398509491603,
            18014398509491621,
            18014398509491633,
            18014398509491653,
            18014398509491959,
        ];

        assert!(
            primes
                .into_iter()
                .map(Integer::from)
                .all(|x| is_prime(&x))
        );
    }
}
